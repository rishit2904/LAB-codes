SQL> select count(id), course_id from takes group by course_id;

 COUNT(ID) COURSE_I
---------- --------
         1 HIS-351
         1 EE-181
         7 CS-101
         2 CS-347
         1 FIN-201
         2 CS-319
         1 BIO-101
         1 PHY-101
         2 CS-315
         2 CS-190
         1 MU-199

 COUNT(ID) COURSE_I
---------- --------
         1 BIO-301

12 rows selected.

SQL> select count(course_id), dept_name from course group by dept_name;

COUNT(COURSE_ID) DEPT_NAME
---------------- --------------------
               1 Elec. Eng.
               1 Physics
               5 Comp. Sci.
               1 Finance
               3 Biology
               1 History
               1 Music

7 rows selected.

SQL> select dept_name, avg(salary) from instructor group by dept_name having avg(salary)>42000;

DEPT_NAME            AVG(SALARY)
-------------------- -----------
Elec. Eng.                 80000
Physics                    91000
Comp. Sci.            77333.3333
Finance                    85000
Biology                    72000
History                    61000

6 rows selected.

SQL> select count(course_id), section_id from section group by semester='Spring' and
year=2010;
select count(course_id), section_id from section group by semester='Spring' and year=2010
                                                                  *
ERROR at line 1:
ORA-00933: SQL command not properly ended


SQL> select count(course_id), section_id from section group by semester='Spring' and year=2010;
select count(course_id), section_id from section group by semester='Spring' and year=2010
                                                                  *
ERROR at line 1:
ORA-00933: SQL command not properly ended


SQL> select count(course_id), section_id from section group by semester having 'Spring' and year having 2010;
select count(course_id), section_id from section group by semester having 'Spring' and year having 2010
                                                                                   *
ERROR at line 1:
ORA-00920: invalid relational operator


SQL> select count(course_id), section_id from section group by( semester having 'Spring' and year having 2010);
select count(course_id), section_id from section group by( semester having 'Spring' and year having 2010)
                                                                    *
ERROR at line 1:
ORA-00907: missing right parenthesis


SQL> select avg(R.T), s.dept_name from (select count(distinct ID) as T from student group by dept_name) R, student s group by dept_name having count(distinct s.ID)>=avg(R.T);

  AVG(R.T) DEPT_NAME
---------- --------------------
1.85714286 Elec. Eng.
1.85714286 Physics
1.85714286 Comp. Sci.

SQL> select se.sec_id,count(distinct t.ID) from takes t, section se where t.semester='Spring' and t.year=2009 and t.sec_id = se.sec_id and t.course_id=se.course_id and t.semester = se.semester and t.year = se.year group by se.sec_id;

SEC_ID   COUNT(DISTINCTT.ID)
-------- -------------------
1                          1
2                          2

SQL> SELECT course_id,prereq_id FROM prereq ORDER BY course_id;

COURSE_I PREREQ_I
-------- --------
BIO-301  BIO-101
BIO-399  BIO-101
CS-190   CS-101
CS-315   CS-101
CS-319   CS-101
CS-347   CS-101
EE-181   PHY-101

7 rows selected.

SQL> SELECT name,salary FROM instructor ORDER BY salary DESC;

NAME                     SALARY
-------------------- ----------
Einstein                  95000
Brandt                    92000
Wu                        90000
Gold                      87000
Kim                       80000
Singh                     80000
Katz                      75000
Crick                     72000
Srinivasan                65000
Califieri                 62000
El Said                   60000

NAME                     SALARY
-------------------- ----------
Mozart                    40000

12 rows selected.

SQL> SELECT MAX(total_salary) FROM (SELECT SUM(salary) AS total_salary FROM instructor GROUP BY dept_name);

MAX(TOTAL_SALARY)
-----------------
           232000

SQL> SELECT AVG(T) FROM (SELECT AVG(salary) AS T FROM instructor GROUP BY dept_name HAVING AVG(salary) > 42000);

    AVG(T)
----------
77722.2222

SQL> SELECT MAX(total_student) FROM (SELECT COUNT(ID) AS total_student FROM TAKES GROUP BY sec_id, semester, year HAVING semester='Spring' and year=2010);

MAX(TOTAL_STUDENT)
------------------
                 7

SQL> SELECT DISTINCT name FROM teaches, instructor WHERE teaches.id = instructor.id AND course_id IN (SELECT DISTINCT course_id FROM takes,student WHERE dept_name='Comp. Sci.' AND student.id = takes.id);

NAME
--------------------
Srinivasan
Brandt
Katz

SQL> SELECT dept_name, AVG(salary) FROM instructor GROUP BY dept_name HAVING AVG(salary)>50000 AND COUNT(ID)>=2;

DEPT_NAME            AVG(SALARY)
-------------------- -----------
Physics                    91000
Comp. Sci.            77333.3333
Finance                    85000
History                    61000

SQL> WITH temp AS (SELECT max(budget) AS temp FROM department) SELECT * FROM department,temp WHERE temp = department.budget;

DEPT_NAME            BUILDING            BUDGET       TEMP
-------------------- --------------- ---------- ----------
Finance              Painter             120000     120000

SQL> WITH temp AS (SELECT avg(sum(salary)) AS T FROM instructor group by dept_name) SELECT distinct dept_name FROM instructor,temp group by dept_name,T having sum(salary)>T;

DEPT_NAME
--------------------
Physics
Comp. Sci.
Finance

SQL> savepoint s1;

Savepoint created.

SQL> update student set dept_name='Finance' where dept_name='Comp. Sci.';

4 rows updated.

SQL> rollback s1;
rollback s1
         *
ERROR at line 1:
ORA-02181: invalid option to ROLLBACK WORK


SQL> rollback;

Rollback complete.

SQL> savepoint s2;

Savepoint created.

SQL> update instructor set salary = (case when salary>100000 then salary*1.03 else salary*1.05 end);

12 rows updated.

SQL> rollback;

Rollback complete.
